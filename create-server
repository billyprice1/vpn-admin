#!/bin/bash

# VPN-Admin -- A script base system for managing an OpenVPN system
#
# Copyright (C) 2018 by Matthew Dwight.
#
# This code released under version 3 of the GNU GPL; see COPYING and the
# LICENSE.GPL for this project for full licensing details.
#

# Create key, certificate and configuration file for server

# get system variables if needed
. ./vars

usage (){
    printf "
Usage: $0 certificate_name template [nopass]

Current certificate files:
--------------------------\n"
    if [ "$(ls -A $SETUP_DIR/easyrsa3/pki/issued)" ]; then
        find $SETUP_DIR/easyrsa3/pki/issued/*  -printf "%f\n"
    fi       
    printf "
List of template files:
-----------------------\n"
    count=`ls -1 $SETUP_DIR/templates/*.template 2>/dev/null | wc -l`
    if [ 0 -lt $count ] ; then
        find $SETUP_DIR/templates/*.template  -printf "%f\n"
    fi
}

# STEP 1 - check if the right number of parameters were supplied.
if [ $# -lt 2 ] ; then
    usage
    exit 1
fi

# STEP 2 - check to see if template file exists
TEMPLATE="${2//.template}"
if [ ! -f ./templates/$TEMPLATE.template ];
    then
        printf "Error TMPL: ./templates/$TEMPLATE.template does not exist.\n"
        exit 1
fi

# STEP 3 - check to see if tls-auth key file exists
if [ ! -f ./easyrsa3/pki/ta.key ] ; then
    printf "Error TA: ./easyrsa3/pki/ta.key does not exist\n"
    exit 1
fi

# STEP 4 - check to see if certificate authority key exists
if [ ! -f ./easyrsa3/pki/private/ca.key ] ; then
    printf "Error CA: ./easyrsa3/pki/private/ca.key does not exist\n"
    exit 1
fi

# STEP 5 - clean up aborted certificate creation attempts
rm -f $SETUP_DIR/easyrsa3/pki/private/*.key.*
rm -f $SETUP_DIR/easyrsa3/pki/reqs/*.req.*

# STEP 6 - see if certificate already exists. If so then skip creating another one.
CERT="${1//.crt}"
if [ ! -f ./easyrsa3/pki/issued/$CERT.crt ];
    # if certificate does not exist remove any intermediate key and req files.
    then
        if [ -f ./easyrsa3/pki/private/$CERT.key ] ; then
            rm ./easyrsa3/pki/private/$CERT.key
            printf "Cleanup: Removing file ./pki/private/$CERT.key\n"
        fi
        if [ -f ./easyrsa3/pki/reqs/$CERT.req ] ; then
            rm ./easyrsa3/pki/reqs/$CERT.req
            printf "Cleanup: Removing file ./pki/reqs/$CERT.req\n"
        fi
        # generate new key files.
        cd ./easyrsa3/
        printf "Creating Server Certificate for $CERT\n"
        ./easyrsa build-server-full $CERT $3
        cd ..
        #
    else
        printf "Certificate easyrsa/pki/issued/$CERT.crt already exists.\n"
fi

# STEP 7 - check to see if certificate is created.
if [ ! -f ./easyrsa3/pki/issued/$CERT.crt ] ; then
    printf "Error CRT: ./easyrsa3/pki/issued/$CERT.crt was not created.\n"
    exit 1
fi

# STEP 8 - check to see if key file exists.
#          note: key file should exist if certificate exist.
if [ ! -f ./easyrsa3/pki/private/$CERT.key ] ; then
    printf "Error KEY: ./easyrsa3/pki/private/$CERT.key does not exist. Try ./delete-config first.\n"
    exit 1
fi

# STEP 9 - make sure the "server" sub directory exists. If not create it.
if [ ! -d servers ] ; then
    printf "Creating directory ./servers for server config files.\n"
    mkdir servers
fi

# STEP 10 - make sure the "ccd" directory exists. If not create it.
if [ ! -d ccd ] ; then
    printf "Creating directory ./ccd for server-side client config files.\n"
    mkdir ccd
fi


# STEP 11 - We seem to have everything we need to create configuration file.
#
# copy over template
cp ./templates/$TEMPLATE.template ./servers/$CERT.conf
#
# Make sure we start on a new line for keys.
printf '\n#\n' >> ./servers/$CERT.conf
printf "!!!!! Do not change anything below this line. !!!!!\n" >> ./servers/$CERT.conf
#
# Add diffie-helman
printf '<dh>\n' >> ./servers/$CERT.conf
cat ./easyrsa3/pki/dh.pem >> ./servers/$CERT.conf
printf '</dh>\n#\n' >> ./servers/$CERT.conf
#
# Add tls-authority key
printf '<tls-auth>\n' >> ./servers/$CERT.conf
cat ./easyrsa3/pki/ta.key >> ./servers/$CERT.conf
printf '</tls-auth>\n#\n' >> ./servers/$CERT.conf
#
# Add certificate authority
printf '<ca>\n' >> ./servers/$CERT.conf
cat ./easyrsa3/pki/ca.crt >> ./servers/$CERT.conf
printf '</ca>\n#\n' >> ./servers/$CERT.conf
#
# Add certificate
printf '<cert>\n' >> ./servers/$CERT.conf
cat ./easyrsa3/pki/issued/$CERT.crt >> ./servers/$CERT.conf
printf '</cert>\n#\n' >> ./servers/$CERT.conf
#
# Add key
printf '<key>\n' >> ./servers/$CERT.conf
cat ./easyrsa3/pki/private/$CERT.key >> ./servers/$CERT.conf
printf '</key>\n#\n' >> ./servers/$CERT.conf
#
printf "Configuration file ./servers/$CERT.conf created.\n"
#
# Create a .ovpn configuation file also
cp ./servers/$CERT.conf ./servers/$CERT.ovpn
todos ./servers/$CERT.ovpn
printf "Configuration file ./servers/$CERT.ovpn created.\n"
